#[derive(Debug, Clone, PartialEq)]
enum Token {
    Number(i64),
    Op(char),
    LParen,
    RParen,
}

pub fn part1(input: &str) -> i64 {
    parse(input)
    .iter_mut()
    .map(|exp| eval(exp, false))
    .sum()
}

pub fn part2(input: &str) -> i64 {
    parse(input)
    .iter_mut()
    .map(|exp| eval(exp, true))
    .sum()
}

fn eval(exp: &mut VecDeque<Token>, part2: bool) -> i64 {
    let mut value_stack: VecDeque<i64> = VecDeque::new();
    let mut op_stack: VecDeque<Token> = VecDeque::new();    
    
    while let Some(token) = exp.pop_front() {
        match token {
            Token::Number(n) => value_stack.push_back(n),
            Token::LParen    => op_stack.push_back(Token::LParen),
            Token::RParen    => {
                while let Some(op) = op_stack.pop_back() {
                    match op {
                        Token::LParen => break,
                        Token::Op(op_token) => {
                            let arg1 = value_stack.pop_back().unwrap();
                            let arg2 = value_stack.pop_back().unwrap();
                            if op_token == '+' {
                                value_stack.push_back(arg1 + arg2)
                            } else {
                                value_stack.push_back(arg1 * arg2)
                            }
                        },
                        _ => unreachable!()
                    }
                }
            },
            Token::Op(op)    => {
                while let Some(Token::Op(op_token)) = op_stack.back() {
                    if part2 && op == '+' && *op_token == '*' { break }
                    let arg1 = value_stack.pop_back().unwrap();
                    let arg2 = value_stack.pop_back().unwrap();
                    if *op_token == '+' {
                        value_stack.push_back(arg1 + arg2)
                    } else {
                        value_stack.push_back(arg1 * arg2)
                    }
                    op_stack.pop_back();
                }
                op_stack.push_back(Token::Op(op));
            }
        }
    }
    while let Some(Token::Op(op_token)) = op_stack.back() {
        let arg1 = value_stack.pop_back().unwrap();
        let arg2 = value_stack.pop_back().unwrap();
        if *op_token == '+' {
            value_stack.push_back(arg1 + arg2)
        } else {
            value_stack.push_back(arg1 * arg2)
        }
        op_stack.pop_back();
    }
     
    value_stack[0]
}

use std::collections::VecDeque;
fn parse(input: &str) -> Vec<VecDeque<Token>> {
    input
    .lines()
    .map(|line| tokenize(line))
    .collect()
}

fn tokenize(input: &str) -> VecDeque<Token> {
    input
    .chars()
    .filter(|&c| c != ' ')
    .map(|c| match c {
        '+' => Token::Op('+'),
        '*' => Token::Op('*'),
        '(' => Token::LParen,
        ')' => Token::RParen,
         _  => Token::Number(c.to_digit(10).unwrap() as i64)
    })
    .collect()
}

pub const INPUT: &str = 
"5 + 9 + 3 + ((2 + 8 + 2) + 8 + 9 * (4 * 2 * 5) + 6) * 4
7 + ((9 * 5 + 9 + 2 * 7 * 6) + 3 + (3 + 2 * 8 + 6) * 6 + 4 * 8) + 5
9 + (6 * (4 * 8 + 2 * 4 + 8 + 6) * 4 * 5 * (7 * 8 * 9 + 3 * 4) + 8) + ((2 + 7 * 5 + 8) * 5 * (3 + 8) + 5 + 8 * (7 + 8)) + (2 + 2 + 5 + 7 + 7)
6 + (5 * 7 * (6 * 4 * 5 * 3 + 2) + 3) * 3 + 6
9 + 3 + 7 + (5 * (7 * 8 + 3 * 8) * 2)
2 + 4 + (3 * (8 + 2 + 9) + 5 * 6 * 3 * (6 + 9 + 5 * 9 * 9 + 4)) + 8
6 * 3 + 8 + 3 * (9 * 2 + 5 + 4) + 2
2 * (9 + 9 + 5) * 8 + 5 + 6 + 3
3 + (2 + 3 * 3 * 3) + 2 * 3
(7 + 3 + 5 * 9 * 5 * 5) * 5
3 + 7 * 9 * 7
((9 + 5 + 2) * 7 * (2 + 7 * 8 * 7 * 8 + 3)) * 2 * (2 + 3)
2 + 7 * (2 * (5 + 8 + 5 * 7 * 2 * 7) + 2 + 6) * 6 + 2 * 6
(8 * (6 * 3 + 7 + 8 * 4 * 5)) * (9 + 8 * 8 + (9 + 2) + 6) * 7 + 5
3 + 9 + 9 * 5 + 4
7 * ((4 + 9 + 6 + 9 + 5 + 7) * 8 * 7 + 3 + 7 + 6) * 5 * 3 + 8
(2 * (8 + 5 + 5 + 7) + (2 + 9 + 8) * 8 * 8 * (4 * 8 * 7)) * ((6 + 2 + 7 * 2) * (4 * 2 + 9) + (4 + 3 + 8 + 8) + 4 + (2 * 4 * 9 * 9 + 4 + 6)) + 4 * (6 + 3 + (6 + 5 * 6 + 9)) + 9 + 7
4 * 3 + 6
8 * 8
4 + 6 * 6 + 7 * (4 * 2 * 4) * 5
7 * 6 * 8 * 3 * 9
8 + 2 + 4 + ((4 + 9) * 8 + 4 * 4 * 4 * 2)
5 * (5 + 3 + (6 * 6) * (9 * 8 * 4 * 6) + 5 * 8) * (4 + 9 + 2 * (3 + 4) * 2)
(4 + (8 + 4 + 3 + 4 * 7 + 2) * 4 * 8 + 9) * 5 + 4
8 * 6 + (3 + 7 * (7 * 3 + 5 * 4 + 6 * 9)) + 6 * 8
8 * (9 * 4 + (5 + 4 + 3 + 3 + 4)) * (4 * 9)
6 + ((7 + 3 * 4) + (7 + 6)) * ((6 + 6 + 7) + 7 * 9 * (8 + 4 + 7 * 3))
3 * (3 + (3 + 2 * 3 * 5 + 3) * (9 + 8 + 3 * 3 + 8 + 7) + 9) + 3 + 8 * 4 + 4
2 * (5 * 2 + 2 + 8 + (3 * 9 * 5 + 9 * 4) + (2 + 6 * 3 + 8 * 5)) + 3 * 5
4 + 8 * (6 * 6) + 7 * 4 + 2
(3 * 8 * (3 + 2 * 3 + 5 + 5) * 4 * (4 * 2 + 5 * 6 + 2 + 6) + (7 * 7 + 7 * 4)) + 3 * 6 * 8
3 * 8 + 3 * ((5 + 5 * 5 * 8 * 2) * 2 * (9 * 8 * 8) * (6 * 5 * 8 * 3 + 6 + 8) + 6 + 6)
((9 + 7 * 2 * 7 * 2 * 9) * 2 * 8 * 5 + (7 + 4 + 9)) + 8 + 5 * 3 + 3
(2 + 5 + 9 * 7 * 4) + (4 * 3 + 8 * 2)
5 * (8 * 3 * 6 + 8 + (7 + 9 + 4 * 7) * 2) + 5 * 9 * 7
4 + 5 + (9 * 9 + (4 * 6 * 6) + (4 + 5 + 8 + 9 * 2 * 6) * 2 + 4) + ((5 + 6) + (4 * 7 * 5 * 9 * 5 * 6) * 6 * 2 + 4 + (9 * 7 * 5 + 7)) * (7 * (6 + 3 * 5 + 4))
(4 + 8 * 7 + 5 + 7) * 4 * 7 * 8 * 8 + 6
6 * 2 * (5 * 7 + 9 * 7 + 5 + 3)
9 * 5 * 7 + 8 + (5 + 2 * 7 * 8 + 2) + 5
6 + 3 + 2 * 4 + (8 * 9 + 4 + (9 + 5 + 2 * 3)) + 4
(8 + 9 + (6 * 4 * 9 + 6) * 9 + 3) * 6 + (7 + 7 * 6 * 8 + 4) + 4
(9 + (7 * 9 * 6 * 3 + 9 * 7) * 8 * (9 + 4 + 8 + 9) + (6 * 8 * 7 + 6 + 2) * 5) * 8
7 + (9 * 6 * 3 + 8) + 5
9 * 2 + (2 * 9 * (3 * 5)) * (9 + 5 * 7 + (2 * 2 + 7 * 5 * 2 * 2) * 9)
(4 + (5 * 2 * 3)) + 8 * 8 * 6 * 6
(4 + 7 + 6 + 6 * (9 * 5 + 9 * 6 * 7)) * (4 * 3 * 5) * 9 * 3 * 7 + 4
(6 * 6 + 5) + 5 * (7 + 7 * 5 + 4)
(6 + 7) * 4 + 3
4 + 5 * 6 * (8 + (5 * 2) + 8 * 4 + (4 * 6 * 3 * 2) * 8)
8 * (8 + 4 * (2 * 5 + 9 * 8 * 6 * 9) * 3 + 2 * 5)
(4 * 3 * 6 * 7) * 4 + 4
((8 + 8 * 5 + 2 * 5 * 9) + 3 * (3 + 7 * 6 + 5 + 2)) * 3 * 7 + 4 + 6 * 6
4 * (7 + 6 + 7 * (4 + 9 + 8 + 9))
2 + 9 * 5 + (7 + 6 + 5 * 9) * 9
(3 * 3 * 4) * (2 + 3) + 2 * 7
7 * 6 + (2 + 5) + 4 * 3
8 + (2 * 3) * 7 + 4 * 3 + 6
4 * (6 + (6 + 7 * 8 + 7))
6 * (7 + 5 * (2 + 9 * 8 * 8 + 2 * 3) * (3 + 2 + 9) + 5 + 5)
7 + 6 + (7 * 2 * 9 * 9 + 5) * (6 * 9 + 2 * 2 + 2 * 3) * 5 + 2
5 + 4 + 8 * (2 + 2 + 7 + (7 + 6 + 9 + 5 * 7 + 3) * 7 + (2 * 6 * 6))
3 * (4 + (2 * 6 + 3) + 2 * 2 * 5) + (7 + 2)
(3 * (9 + 3 + 7) * 5 * 8) * 2 * ((6 + 7 + 2 * 7 * 9) + 4 * 5 + 9 * 7) + (6 * 2 * 4 * 8 + (5 * 4 + 4 * 3 * 2) + 5) + 2 + 5
(7 + 6 * 8 + 3 + (7 * 2)) * 5 + 5 * 6 + 8
(6 + 3) + (9 * 7 + 3) + (8 * 4) + 9 * 9 * (3 * 3 + (5 * 3 + 9 * 7 * 3))
5 * 2 * 5 + 2 + 5 * 6
((2 + 9 * 8 + 2 * 2 * 4) + 5 + 6 + 4 + (6 + 3 + 2 + 6 * 2)) + 4 + 8 + 6
8 + (8 * 5 * 6) + 5 + 6 + 5
8 * 3 + 7 * 6 + 5 * ((6 * 9 + 5) + 7 + 5 * 2)
(7 + 2 + 5 * (4 + 9 + 5 * 3 * 3) + 2 * (9 + 5 * 3 * 7 + 5 * 5)) * 5 * 3 + 3 * 7
8 + (3 * (4 + 9 * 2 * 4 * 6) + 8 + 5) + 9 + ((2 + 4 * 6 * 4) * 3) + 3
(6 * 9 * 3) + 8
4 + ((6 * 2 + 7) * 4 * 2 + (5 + 9 * 8 + 9) * 9) * 9 * 8 + (6 + 5 + 7 * 7 + (3 * 9 * 3 + 2) * (5 * 2 * 2 * 8 + 2))
4 + ((2 + 7 + 6 + 5) * 8 * 9 * 7 + 5 + 3) * 8 * 2
7 * 2 * 6 + 2 * ((5 * 7) * 6 * (9 + 6 + 7) * 4 + (9 + 7) + 9) * (6 * 3 + 3 + 2 * 8)
5 + 7 + 8 * 2 + (6 * 3 * 7 + 6 * 2)
9 * 7 * 6 * 8 + (4 * 2 * 5 + 4 + 9 + 3)
4 * 5 + (8 + 5 * 4 + 3 * 8) * 3 + 4 * 2
6 + 9 + (2 * (5 + 2 * 9 + 4) * (2 * 9)) + (7 * 5 + 7 * 4 + (8 * 3 * 7 + 4 + 3) + 9)
((6 * 6 * 2 * 6) * (6 + 5) + 7) + 6 + 8
3 + 9 + (5 * 7 + 9 + 5) * 2 * 5 + 2
4 + 6 * 7 + 4 * 9 + ((9 * 2 + 5 + 3 + 8 * 2) * (9 + 3 + 3 * 2 * 2) * 9 * 2 + 7)
8 + 6
6 + 6 * 5 * (7 + 6 + 4) + 2
9 + 7 + (4 + 5 * 2 * 3) * (6 + 3 + 8 + 6 * (2 + 9 * 2 * 9 * 7 * 5)) * (8 * 7 * 7 + 4 + (7 * 5 + 2) + (7 * 8)) + 7
6 * 9 + 3 + 6 + 9
5 * (6 + 7 + 8 + (3 + 7 + 4 * 7) * (2 * 5)) + 2
(8 * 8 * 5) * ((6 + 7 * 6 * 6) + 4 * 8 + 4 + 9) * (9 * 9 + 4 * 2 * 3) * 8
9 * 9 + 7 * 6 + (9 + 7 + 9 * 9)
2 + 9 + (5 * 6 * 7 * 8 * 6 * 2) * 2 * 8 * (3 * 6)
(3 + 2 * 9 * 8) * 2 + 6 + 9 + (3 * 8 * 6)
(4 * 4) + 5
4 + 6 * 2 + 7 * 3 * 7
6 + (5 * (5 + 3 + 6) + 6 + 9) * 2 + 8 + 9
((4 * 9 + 7 + 9 * 8 * 2) * 4 + (9 * 3 + 8) + 8) * 2
8 + 2 + 7 * (8 * 9) + (2 * 9) + 4
(3 * 9 + 7 + 3) * (9 * (8 * 3 + 8 + 7 + 7 * 6)) + 7
9 * 2 + (3 * (7 + 9 * 5) + 6) * 4 * (7 + 6 + 4) + ((9 * 2 + 9 * 3 + 4 * 3) + 5 * (7 * 2 + 9 + 3 * 9) * (6 * 2 + 4 + 6) * 7)
9 * 3 * (7 + 8 * 8) + 9 + 7 * 9
(8 + 4 * (2 * 2)) * ((7 + 8 + 8 * 5 + 6) * 2 + 5 * 4)
(2 + 2 + 6 * 5 * 2 + 4) * 9 * 7 * 2 + (6 * 8 * 5 + 6 + 3)
4 * ((5 + 8 + 4 * 3 + 6) + 9 * (5 * 2 + 9)) * 9 + 8
9 * 5 + 9 + ((7 * 3) * (7 * 4 * 3 * 2) * (9 * 9 * 5) * 2) + 8 * (5 + 4 + 9 + 6)
2 + 6 + (7 * 8 + 3) + 3
(7 + 4 + 7) * 3 * 7
((8 * 8) * 7 + 2 + 5 * (6 * 4 + 4) + (3 + 4 * 8)) * 4 * 8
9 * ((5 * 2 * 5 + 8 * 7) * 2 + 7)
2 + 8 + 8 + 3 * 5
7 + 6 * (6 * 5 + (2 + 6) * 2 * (5 * 6))
5 * (2 + 2 + 2 * 9)
9 + 6 * 4 + (6 * 6 + 4 * 9 * 8 + 8) * 5 + 6
4 * 3
8 * 3 + 7 * 2 + (2 * 3 + 3 * 7 * (4 + 7 * 9 * 7 * 2 * 3))
(9 * (8 * 9)) + 4 + 8 + 5 + ((2 + 5) + (6 + 2 + 2 + 2 * 8) * 6 + 5)
9 + 8 + ((5 * 7) + 9 * 3 + 8) * 7
(3 * 5 * (2 + 4 + 3 * 7)) + 8 * 7
(9 * 5 * 9 + 5 * (7 + 4 * 8)) * 7 + 3
((6 * 9 + 5 + 8) + 6 * 5 + 9) * 2 * 9 + (8 + (8 * 2 * 2) * 4 + (4 * 5) + 3) * (4 * 4 + 6 + 5 + 6)
4 + (3 * (6 + 8 * 6 * 8 * 9) * (2 * 7 + 9 * 4 * 2)) * 2 + 7 + (6 + 9 + 6) * 2
2 + 5 + 9 * 5
4 + (9 * 2) + 5 + 3 * 6 * (9 * 3 * 2 * 9 * 7)
(8 + (2 + 8 + 5 * 7 + 6 + 5) * 4 + 9) * 4 + 6
3 + (9 + (8 + 2 * 2 + 9 + 7 + 7)) + 9
(7 + 6 * 8 + 6 + (7 + 7 * 8)) + 2
(7 * 7 + 6 * 9 * 8) + 6 + 3 + 6
(4 * 5 * 8 * 6 + 5 * 9) * (2 + (8 + 5 * 9 * 2) + 6 * 8 * 2 * 5) * 5 * 5 + 4
4 + (6 + 5 * (9 * 5 * 8 + 4 * 7 + 7) * 6) + 9 * 4 * 7 * 2
((8 + 2 + 8 * 4 * 6) * 2 + 3) + 6 + 8
(3 * 8 * 2 * (3 + 7 * 9) * 2 * 4) * (3 + 6 + (8 * 2 + 8 + 2) * (8 + 2) + 9) * (3 * 5 * 3 + 2) + 3 * 7
7 + 2 + 3 + (9 * 7)
(2 * 6 + 4 * 3 + 2) * 5 + 3 * 8 * 7 * (8 + 3 + 3 + 9)
7 * (9 * 2 + 8 + 2 * 9) + (7 * 7 + (2 * 2 + 2 * 4 * 9 + 9) + 6 + 5) * 2 * (3 + (4 + 8 * 7 * 7) + 5 * 2) * 9
6 + 5 * 7 * 6 + (2 * (6 + 6 + 2 + 9 * 5 * 3) * 5) + 2
(3 + 6 + 8 * 3) + 7 * 5 + 9 + 3
(3 + 6 + 4 * 6) * 5
4 * 7 * (9 * 9 + 7 + 2 * (4 * 4 + 4 + 9 * 8) + 5) + 8 * 7 * 7
6 + ((6 + 2) + 4 * (7 * 5 * 2) * 5 * 6)
3 + (3 * 9 + (2 + 3 + 8 * 8 * 8) + 4 * 3 + 7) * 8
(3 + 5 + 8 + 6) * 5 + ((4 * 4 * 8 + 7 * 7 + 6) * 2 * (4 * 3 + 7) * (8 + 5 * 8 + 8 + 4) + (6 + 3 + 2 + 2)) * 6 + 2 + 5
8 + ((8 + 7 * 9 + 9) + 6 * 8)
3 * (4 + (2 + 4 * 7) + 5) + 5
6 + 8 * (6 + 2 * 9) + 4 + 4
6 + (9 * 2 * (2 * 7 + 7 * 6 * 7 * 4)) + 4
4 + 4 + (5 * 8 * 4 * (4 + 4 + 6 + 4 * 3) + (6 + 7) * 6) * 8 * (5 + 7 + 4 * 7 + 9 * 4)
8 + ((8 + 5 + 6 + 2 * 6) * 4 * (3 * 5 * 5) + 9 * 8 * 8) * 8 + 2 * 5 + 6
4 + 4 * (8 * 5 + 5 * 2 * 5 * 2) + 2 + 3 * 7
6 + 4 + (9 + 4 * 3 * 2 + 7) * 5 + 5
8 * ((3 + 5) * 7 * (5 + 3 * 6 * 4) + 5) * (2 * 6 * (5 + 6) * 9) * (5 * 7 + 3 + (5 * 9 * 8)) * 6 + 7
9 + 2 * 7 * 6 * (2 + 6 * (6 * 5 + 5 + 3 + 8) * 8 + 5 * 9)
((8 + 4) * (3 * 7 + 8 * 5 + 4) + 7 * 9 * (6 + 3 * 5 * 3) * 2) * 7 + (4 * 9) * 4 + 4 + 3
9 * (9 + 2 * 5 + 4 + 8 + 7) + 2 + 9 * 3
(9 * 9 + 4 * (2 + 6 + 9) * 2) + 8 * (3 + 6 + 6) * 8 * 9 * (6 * (2 * 7 + 3) * 6)
5 * (3 * 2 * 6 + 9) * 2 * 5 + 3
((9 + 6) * 3 + 3) * 5 * 5 + 2 + ((8 + 7 + 3) + (7 + 5) * 4 * 3 * (6 + 6 + 4 + 4))
4 + (3 + 6 + 6 * 5 * 4 * 2) * (5 + 2 * 3) * (8 * 6 * 5 * 3) + 5
(7 + (3 + 3 + 9 * 4 * 9)) + 5 * 3 * 7 * 3
4 + (9 + (5 * 6 + 2) + 3 + 7) + 3 + 9 + ((5 * 8 * 6) + 8) + (6 + 4 + 8 * 4 * (9 + 2 * 4 * 5 * 6))
5 * 4 + 9 * (3 * 2 * (8 + 5 + 6 * 2 * 4) * 4) * 9
7 + 4 * 5 + (3 * 2 + 4 + 2)
2 + (6 * 8 + 3 * (4 * 8 + 4 * 2 * 3 + 6)) + 8 + 6 * 8 + (4 + 8 * 9 + 5 * 6 + 8)
2 * 2 * (3 + 7 * 8 * 2 + 8 + (8 * 6 + 5 * 8 + 5)) + 7 * 3
(5 * 5 * 3 + 8 + (6 + 9 + 2)) + 7 + 5 * 6
(4 * 5 + (6 + 4 + 6 + 4) + 5 + 7) * 5
7 + (6 * 5 * 8 + 9 * 8 * (5 * 4 * 8 + 3 + 9))
3 * (5 * 2) + 4 * 8
((5 * 8 + 6 * 4 * 4 + 7) * 4 * 6) + (9 * (4 * 2 * 6 + 7 + 7 + 6) * 6) * 2 * 5 * 2
(3 + 7) + 5 * (7 * 4 + 6 + 4 + 7 * (4 * 3 * 6 * 9 * 2)) * 5 * 6
((6 + 9) * 7) * 6 + (5 * 3 * 3 * 7 * 2 * 8) + 2
6 + (7 + 5 * 3 * (4 + 8 * 9 * 9 + 7)) + 9 * 5 + (5 * 3 * 2 * 7 * (6 + 6 + 6 * 7))
(6 + 2 + 4 * 5 * (3 * 9) + 7) + ((4 + 2 + 7) * 9) * 4 * 7 + 6 * 9
9 + 6 * (2 * 6 * (2 + 5 * 4 * 6) + 3)
(6 + (9 + 4 * 6) + 6) + 7
6 + 5 * 7
(8 * 8 * 7 * 4 * 2) + 6 * 3 + (9 + 9 + 7 + (9 + 2 * 2 * 6 * 7) + 3) * 7
4 + 4 + (3 + 9 * (2 * 7 * 7 * 3) * 6) + 4 * 4
(2 * 2 * 6) + 8 + (5 + 4) * 4 * 5
6 * 3 + 3 * 7
3 * 7 + (2 + (3 + 6 * 5 * 4 + 5 * 2) * 6 * 5 * 9) + ((8 + 2 * 2 * 5 + 2) + (2 + 4) + 7 * 7 + (3 * 3 * 5 + 5 * 4 + 3) * 7) * 6
8 + 7 + 4 * ((8 * 7 + 4) + 4) + (4 + 2 * 3) * 2
2 + 3 * 2 * (8 + (6 + 3 + 2 * 2 * 5 * 5) * 9) * 6 * 5
2 * 5 + 5 * (8 + (8 * 7) + 2 + (8 + 2 * 3)) + 6
(8 + (2 + 4 + 5) + 2 * 3) * 5
7 + 7 * (6 + 9 + (6 + 5) * 3 * 5)
2 + (5 * (9 * 5 + 4 + 3 + 8 * 9) + 9)
2 + 7 + ((2 * 8) + 4) + 7
7 * 9 * (2 * 7 + 9 + 6)
(4 + 5 + (8 + 4)) + 4 * 2 * 8 + 7 * 5
3 + 5 + 2 + 8 + 7 + 2
(2 * 6 + 8) + (2 + 3 * 6 * 5) + 3 * 4
9 * (2 + 8 + 2 * (2 * 7 + 9 + 8 * 6 + 8) * 3 * (8 + 5 + 8 + 6 + 9 + 9)) * 2 + 4
(2 + (4 * 9 * 7) * (6 + 4) * (9 * 2 * 4 + 5) + 5) + 8 * 6 + 4
(7 + (4 * 5 + 4 * 2 + 7 + 6) + 5) + 9 + 7
2 + 5 * (7 + (9 + 8) * 7)
3 * ((9 * 6) * 6 * 5 * 5 * (6 + 6 + 9 * 4 + 7 * 6)) + 6 + 2 + 2 * 9
(6 * 6 * 8 * 5 + 8) + 4 * (9 + 6) * 5 * ((9 + 7) + (3 * 6 * 8 + 5 * 4 + 7) + 9 + 5) + (2 + 6 + 9 * 2 + 8)
8 + 2 + 2 * 6 + 8
((2 + 8 + 6 * 2 + 9 + 8) + 8 * 7 + 4 * 4 + 2) + 9 + (4 * 3 + 2 + (3 * 2 + 8) + 4) + 9
3 * 7 + (5 * (9 + 6 * 5) + 4 + 6 + 8 + 2) * (3 * 7 + 3) + 8
5 * (4 + 6 + (2 * 8 + 9 + 3 + 2 * 2) * (4 + 5 * 2 * 3 * 8 * 3)) + 9
(6 + 9 + 8 * 5) + (8 * (6 + 8 + 8 + 9 + 3 * 2) * 3 + (8 * 4 + 5 + 9 + 5 * 6)) + 3 * (2 * (7 * 6 + 9 + 8 * 9 + 3) + 3 * 4 * 4) + 8 + (3 + 2)
6 + ((8 * 8 + 5 + 3 + 4 * 7) * 2 + (2 * 8 * 7)) * 4 + 7 + 9 * 8
6 * (4 + 4 + 7)
6 * (8 * 4 * 3 * (4 + 5 + 7 + 9 * 3) * 2)
9 + 8 + (5 * 2 + 9) + (8 * (3 * 9) + 3 + (7 + 8 + 4) + 3) + 7 + 5
8 + 4 * 8 * (4 + 8 * (9 * 7 * 6 + 2 + 5)) * (4 * 3)
(7 * 2 * 6 * 2 * 8) + 6
(2 * (7 + 2) + (5 + 8 * 8 + 9 + 6)) * 8 + 3 + 9 * (6 + (7 * 2 * 2 + 4) * 8 * 4 * (3 + 3 * 3 + 8 + 4) * 5) * 8
7 * (3 + 7 + 3 * (2 * 5 + 5) + 6 * 5) * 8 * 2
3 * 9 * 5 * ((4 + 5 + 3) * 6 + 8 + 9 * (6 + 6)) + (6 * 6)
(4 * 8) + (7 * 9 + (3 * 4 + 8 * 7 + 5 + 3) * (7 + 6 + 2 * 7 * 6 * 2)) + ((4 + 7 + 3 + 9) * 5) + 8
4 + (9 * 4 * 3 * 7 * 6) * 3 * 6 * 7 * 4
5 * 9 + ((8 * 8 * 6 + 2 + 4 * 3) * 5 + (7 * 5) * 6 * 5)
6 + 7 * 3 + (6 + 6 + (9 + 7 * 5 + 5)) * 7
5 + ((6 + 9) * 8 * (8 + 3 + 3 * 5 + 9 * 9) * 3 + 5 * 9) + ((6 + 2 + 3) + 6 + 7 + 7) * 6 * 6 * 4
6 + 5 + (9 + 9 + 5 * (2 + 3 * 4 + 2) * 9)
(9 + 4) * 7 * (9 * 7 + 5 * 4 + 4 + 5) + 8
4 * 2 * 4
9 + ((4 * 6 + 9) + (8 * 3 + 6 * 5) + 3 + 4 * 8) * 8 * (2 + 6 * 3 * 2)
9 + 9 * 3 + ((9 * 7 * 6 + 8) + 9 * 4 + 6) * 5
(3 * 2 * 8 + 7 + 7) * 8 * 4
(9 + 2 * 4 * 7) * 8 * (8 * 4 * 4 + 5) + 4 + ((9 * 8 * 5 + 6 + 8) * 5 * (4 * 9 * 8) * 7) * 2
(9 + 6 + 7 * 6 + 9 * 4) + 4 * (4 * (6 * 5 + 8 * 9 + 2) * 4 + (3 * 8 + 8) + 3 + 6) * 6
9 * 9 * (4 + 9 * (2 + 7) * (5 + 3 + 5) + (6 * 4))
(9 + 6 * (2 + 3 + 2) * 8 + 3) * 5 * 6 + 7 + 9 * 2
3 + 4 * (2 + 4 + 6 + 2 * 7 + 4) + 5
7 + ((8 + 3 * 9) + 7 + 7 + 5) * (4 * (6 * 3 * 4 * 4 + 9 * 8) * 7 + 2 + 2) + ((6 + 8 * 5 + 2) + 4 + 2)
(3 * (8 * 2)) + 8 * 5 * (5 + 4 * 4 + 8 * 8 * 8) * 2
7 + 8 * 8 * (7 + 7 * (8 * 7 + 2 + 6 + 6 + 5) + 3 * 2)
9 * 9 * 4 * ((4 * 6 + 7 + 9 * 4 + 2) * 5 + 7 + 3 * 3 + 8) * ((4 + 6) + 4 + (4 * 5 * 7 + 4 + 2) + 2)
3 * 2 * 9 + ((8 * 7 * 6 * 3) * 6 * 9 + 3 + 2 + 8)
(3 * 7 + 6 + 7 * 3 + 7) + (9 + 4) + (8 * 3 * 8 + 5) * 2 + 8
3 + 7 + ((9 * 6 * 9 + 7) + 3 + 2 * 4 * (2 * 2)) + 7
9 + 3 * (5 * 4 + 2 + (9 * 2 * 3 * 6) * 6 * 7) * 7
((5 * 2 + 8 * 5 + 2) + 8) * (5 * 3)
(5 + 8 + 3) * (8 + 7 * 8 + (7 + 9 + 2 * 5 + 3))
(6 * (8 * 6 * 2 * 9) * 8 + 5 + 7 * 6) * 3 + 9 * 2 + 3 * 9
4 * 4 + 7 * 4 * (5 + 8) * 3
2 + 7 + (5 * 9 * 2 * 7 + 4)
6 * ((8 + 7) + (6 + 3 * 2 * 9 + 4) * 2 + 8 + 5 + 5)
5 * (2 + 4 * 8 + 3 + 3 + 5) * 4
9 * 2 + 3 * 9 * (8 + (4 * 8 * 2 * 7 + 3) * (9 + 4 * 9 + 3 * 8 + 7)) + 3
3 + 7 + 7 * 6 * 8 + 3
2 + 6 * (6 * 3 + 3 + (9 * 2 + 2)) * 4
((4 + 4 * 4 + 4) + 2 * 9 * 2) + 4 * 9
((7 * 4 + 5) * 8 + 7 + (4 * 6 + 8 + 5 * 6 * 6) + (5 + 3 * 7)) + (2 * (2 + 6) + 4 + 9 + 4 * 3)
6 * (3 + 5 + 9) * ((4 + 9) + 5) + 3 * 6 + 9
(7 * 2 * (6 * 8 * 9 * 3 * 9)) * 2
5 + (5 * (6 + 7 + 5 * 4)) + 9 + (9 + 9 + 6 + 5 + 4) + 8
((9 * 3 + 8 + 3 + 8 + 5) * 8 + 4 + 3) * 2 * 9 + 2
5 * ((5 + 3 + 9 * 6 + 9) * (3 * 6 * 6 * 2) + 6 * 3 * 9 * 3)
(4 * 4 * 7 * 2 + 2 * 7) * 5 * 5 + 7
3 + (7 * (8 + 6 * 5 * 3)) + 9
5 + ((5 + 6) * (9 * 3)) + 5 * 6 + 8 * 6
2 * 6 * (8 * 8 + 5 * (9 + 6 + 3 * 6 + 9) * 3 + 4) * (4 + 4 * 4 * (8 + 5) + 7 + 6) + 5
((7 + 3 * 6) + 6 + (7 * 8 + 4 + 2 + 2 + 2)) + 7 * (4 + 2 + 2) + ((6 + 2) * 6) * 6 + 9
(6 + 2 + 9 * 7) * 7 * 4 + 8
2 + 2 * ((4 + 4 * 8) * 5) * 3 + 8 * ((9 + 8) + 8 * 6)
(6 * 8 * 6 + 2 + (4 * 6 + 4 * 7 + 7) * 2) * 7 * ((5 + 9 + 5) * 8 * 3)
8 + (3 + 5 * 9 * 6 + 3)
2 * 6 + 8 + (2 + (4 + 8 * 5 * 4) + 9) * (7 * (8 * 9 + 9 + 3)) * 8
(3 + (7 * 4 + 7) + 7) + 9 + 3 * (8 * (6 * 3) + 4) + 9 * 2
(4 + 5 * (2 + 6 + 5) * 4) * 9 + 9 + 3
9 + (4 * 7 * 6 * 9 + 8 + 3) * (6 * 4 + 4)
(3 * (2 * 4) * (3 * 7 + 4 * 4) + 2 + 3) * 3 + 3 * 8
7 * (8 + 5 * (3 * 6) + 5 + (2 + 4 * 6 * 7 * 6))
(5 + 7 + 6 * 6) * 8 + 2 * 4 + (2 + (2 + 3 * 5 * 2 + 5) * 7 + 4 * 4)
(3 + 2 + 2 * 4 + (8 + 6)) + 2 + 9 + 3 + 6 + 7
9 + 2 + (7 + 6)
(7 * (6 * 4 * 9 * 4 + 2 + 9) * 5 + 7 + 9) * 3 + 5 + 3 * 7
((3 + 5 * 5) + 4 + (7 * 7)) + (2 + 8 + 7 + 6 + 5 + (7 + 7 + 6 + 4 + 6)) + 8 + 7 + (5 + (5 * 7 * 9 * 4) * 2 + 7)
(5 * 3 + 4) * 4 + 3 + ((3 * 3 * 3 + 5) * 7) * 8 + 7
7 + (2 + 3 * (8 + 4)) * ((2 + 5) + 6 + 6) + 9 + 7
6 + 6 + 3 + 3
7 + 9 + 6 * ((6 * 7 + 2) + (6 * 4 * 4 + 4) * 9) * 3 * (5 * 2 * 8 * 9)
(6 * (2 + 4 * 9 + 3 + 9 * 4) * 5 + 6 + 8 * 7) * 5 * 5 * (9 * 8)
8 + 2 + (4 + 3 * (8 * 6 + 5 + 8)) + 5 + 2
6 * ((9 * 3 + 8 * 8 + 2 * 5) * 8 + 7) * 7 * 5 + 6
2 + 3 + 5 * 5 + ((3 * 7 * 6 * 8 * 3) + 9 * 9) + 2
7 + 2 * 2 + (5 * (8 + 5 * 2) * (3 * 9 + 7 * 7 * 2) * 7 + 8 * 2) + 4
5 * 6 * (7 + 2 * 8)
9 * 4 + ((2 + 3 + 2 + 2 * 8) + 7) * (2 * 9 + 2 + 6)
((5 + 5 + 8) + 8 + 8 + 9 * 7 * 8) * (8 + 5 + 9 + 4) + 5 + 7 + 8 * 3
(3 * 6 + (3 * 8 + 5 + 4 + 6) + (6 * 4 + 6 * 8 * 4) + 7) * (5 * (3 * 7 + 5 + 5 + 2)) * 5 * 6
5 + 6 * 5 * 8 + 2 * (7 + 2 * 9)
4 * 4 + 4 + 3 + 2 + 3
((2 * 4) + 5 * 6 + 2 + 3 + 2) + 4 * 8
5 + (5 + (6 * 3 + 3 * 6) + 7 + 9 * 9) * 9 * 7 + 4
9 + ((8 * 7) + 3 * 5) * 7
4 + (9 + 3 * 7) * 8 * 3
6 + (8 + 9 * 5 + 2) * 3 + (3 * 7)
(8 * 6 * 9) + 9 * 7 * 6 + 2 * (4 + 4 + (2 * 3 + 3 * 4 * 8) + (8 * 5))
(3 + 7) + 8 * 7 * (9 + (8 + 5 + 9) + 3) * 4 * 4
((8 * 5 + 5 + 5 * 3 + 5) + 7 * (3 + 2 * 2 * 3 + 7 * 3) * 2) * 5 + 3 + 3
8 + 3 * 6 + (9 * 7 + 4 * (3 + 3 + 9)) + 3
8 * (8 + 4 + 5 + (9 * 3)) * 5 + 7 + 3 + 7
4 * ((4 * 5 * 4) + 4) * 8 * (2 + 2 + 4 + 7 + 2 + 2)
9 * (6 * 9 + 2 + (7 + 7 + 5 + 4) + 2 + 2) + 5 * ((4 * 3) + (2 * 2) * 6) + 9
8 + (9 * (8 + 6 * 7 * 7 + 3) + 7 * 2 + 5) * 4
5 + (8 + (5 * 3 + 6 + 6 * 3)) * 6 + 4 + ((5 * 3 * 2) + 6 * (4 * 3 + 6) + (4 + 5 * 8) + 9 + 2) * 9
4 * (3 + (9 * 5 * 2 + 2) * 6 + 6 * 4 + 7) * 3 + 3 * (2 * 8 * 5 * 3 + (6 * 7 * 4 + 4))
4 + 6
(2 + 3 + 9) + (9 * 4) * 7 + (2 * 6 * 8 + 3 * (6 + 7)) + 7 + 5
4 + ((9 * 5 + 9) * 6) + 5 * 8 + 6 * 5
2 + (8 * 6 + (6 + 5 * 8) + 3 + 7 + 9) + 6 * (4 * 2 * 5)
(4 * 3 + 5 * 2 + (4 * 4 * 4 + 3 * 2) + (4 + 3 + 9 * 5 + 5)) + 5 * 3 + 2 * (9 * 2 * 5 + 6)
6 * 6 + (3 + (8 * 4 + 8 + 7))
4 + (5 + 4 + 8 * 8) + 6 + 2 + 7 * 5
5 + (6 * 2) * 7 + 5 * 5
2 + 3 + (5 * 4) * 4 + 8 * (5 * 8 * 9 + 8 + 4)
(5 * 3 * 4 * 9 * 3 + 6) + 5 * (9 * 4 + 4)
8 * 7
4 * 2 + 6 + 9 + 6 * (2 * (7 * 9 * 7 + 3 * 9 * 8) * 4 * 4 + 6 + 3)
(3 + 5 * 2) * (8 + 2 + 2 * 7 + 2 * 6) + 9
2 * (4 + 2 + 5 + (4 + 3 * 6 * 7 * 7) + (9 + 7 + 5 + 6)) + (3 * 9)
(3 * 7 + 5 * 7) * ((4 + 2 + 9 + 3 + 3 * 3) + 6 * 7 + (4 * 3 + 8)) + 7 * 9
9 + 9 + 6
((9 + 4 * 4 * 4) * 6 + 2 * 9 * 4 * 9) * 3 + 3 * 8 + 4
7 * 7 + 8 * 3 + 5 * (3 * 7)
((5 * 9) * 3 + 8 * 6 * 4 + 3) + (6 + 7 * 4 + 8) + 8
7 * (5 * 4 * 3 * (2 * 5 * 2) + 6)
9 + 5 * (7 + 8 * 4) * 3 + 2 + (2 + 3 + (8 + 4 + 4 * 5 * 8 + 6) + (4 * 8 + 9 * 4 * 9 * 5))
((9 * 9) + 2 * 8 + 9 + (4 + 9 * 8) + (6 * 3 + 9 * 6)) + (3 * 9 + 8 + 8 * 9) + 5 * 8
((2 * 2 + 5) * (2 + 6 * 5 + 8)) * 5 + 3 * 4
8 + (9 * (7 * 5 * 3 * 2 + 9) + 9) * 6
(6 + (9 * 4 * 7 + 2 + 9) * 7 + 6) + (2 * 4 + 5 + (5 + 8) * 3 + (8 * 9 + 2 * 4 * 4 + 5)) + 2 + 4
3 + 5 * 8
5 + 9 * 4 * 7 + 5 + (9 * 5 * 2 + 8 * 3)
3 * (7 + 6 * (8 + 6) + (9 + 3 * 3)) * 6 + 4 * 3 * 3
(9 * 5 + 2 * 8 + 4) * (8 + (5 * 5 * 6 + 2 + 2)) * 6 * 6 + (5 * 3 + 3) + ((2 * 7 + 7 * 7 + 7 + 3) * 4 + 5 * 3 * 3)
(5 + 5 * 4 + 7 * 8) * (9 * 9 * (4 + 4 * 2 * 5 * 2)) * 8 * 7 + 8 * 9
3 * 5 + 5 * (2 * 3 + 7)
(7 * 5) * 8 * 4 * 5
6 * 3 * 5 * ((4 + 4 * 9 + 2 * 3) * 5) + (7 * 3 * 5 + (8 * 7 + 7 * 6) + 4) * 2
7 + (6 * (5 + 6 * 7)) * 9 * 8 + 3 + 7
6 * 3 * (8 * 8 * 7 * 8 * 2 * 8) * (6 + 5 + (2 + 9 * 6) + 5 * 3) + 6
2 * 9 + 8 + (9 + 9 + 9 * 9 * 3)
((2 + 7) + 2 + 2 * (8 * 2 * 5 * 2)) + 8 + 2 * 3 + 9
8 + 7 + (2 * 5) + 9 * (5 + 4 + 8 + 4) * 3
6 * 9 * 6 + 4 + (5 * 4 * 7 * 9 * (8 + 9 * 3 + 8 + 4) * 6) * 4
8 * (3 * 4 * 3) * (2 * 2 * 8 * 5) + 8 * 4
2 * 7 * ((2 + 2 * 6 * 2) + 3 * 8 * (8 + 6 * 4 + 8 + 2) + 7)
7 + (4 * (5 * 8 * 5)) + 7
5 + (6 + 8)
2 * 4 + (3 * 6 + 8 + 2) * (7 + 3 + 6 + 8)
9 * 3 * 4 + 8 + 3 + (7 + 9 + 9 * 8 + 3 + (8 + 5 + 2 + 9))
6 + (3 + 9 + 8 + 6 * 8 * 7) + 6 * 8
8 + 3 + ((2 + 3) * 8 * 5 + 8 * (2 * 9 * 8 + 5 * 2) + 2)
(8 + 3 + (9 + 9 * 4 * 4) + (3 + 8 * 3 * 4 + 2) * 8) + (5 * 4 + 7 * 3 + (3 + 2 + 2)) + 8 * 5
(8 + 8 * 6 * 3 + (5 + 7)) * 2 * (4 + 3 * 5 * 2 * 9)
(7 + 8 * (6 * 5 + 3 + 2 + 3 * 2) * 7 * 7 * 2) + 4 * 3 * ((3 * 3 * 8 + 8 + 5 * 6) + 5)
3 * 5 + (6 + 7 + 7 + 5) + 2
((2 + 8 * 7 * 5) * (8 + 6 * 5 + 7 * 7 + 3) + (2 * 6) + (9 + 5 + 2 * 7)) * 4 * 5 * 7
7 * 2 * 5 * (8 * 6 * 3) * (5 + (7 * 8 * 3))
(8 + 2 * 5 * 9) + 6 * (7 * 8) + 5 * 9
8 + (5 + (9 * 8) * (7 + 7 * 4 + 7) + 5 + 2) + ((4 + 7 * 3) + (6 + 6 * 8 * 5 + 3) * 6 * (9 * 6 * 6) * 8 * 8) * 3
(7 * 7 + 7) * 3 + 4 * 6
(3 * 2 * (3 + 9 * 3 * 9 * 9) * 6 + 3) * 4 * (8 + 9 + 3 + 6 + 4 * 5)
(7 + 7 * 6) + 6 + 9 * (5 * 4 * 5 * 7 * (4 * 2 * 3 + 8) + 3) + (9 + 8) * 8
4 + (8 + 3 * 3) * ((5 * 7) + 9 + 4) * 2 + 8 + 3
(8 * (6 * 8 + 3 * 3 + 3 + 6) + 5 * (2 * 5 * 5 * 5 + 9 * 8) * 7 + 6) * 7 + 3 * (2 + (6 * 2 + 4 * 2 * 6) * 8) * 3 * 7
3 + 4 + (5 + 3 * (3 + 3 * 6) * 8 * 8 * 9) * 3
(4 + 8) + 7 + 6 * 2 * (8 * 7 * (7 + 7 * 3))
3 * ((7 + 8 + 8 * 7) * 5 * 3 + 8 * 2) * 5 + 2
9 + 2 * 6 * (5 + 8 * (8 * 4 * 7 + 6 + 3 * 8) + 7) + 4 * 3
2 + 6 * 4 * 6 * (3 + 5 * (2 + 4 + 9 * 8 + 6))
3 + (7 + 9 * (3 + 4 * 7 + 2 + 7 * 5)) * (9 + (2 + 9 * 8)) * (7 * 4 + 7 * 4 + (7 + 2 * 5 + 5 * 2))
(7 + 7 * 5 + (3 + 3 * 4)) + 2 + 4 + 8 + 3
2 * (9 + 7 + (6 * 2 + 9)) * (2 * 5 * 3 * 8 * 2 + (3 * 3 * 6))
8 * (8 + 8 + 7 * (7 + 3)) + 4
4 + 9 + 5 * 3
9 * (7 * 7 * (6 + 9 * 7 + 9 * 4) * 9) + 2
(2 * 4 + (8 * 8 * 5) + 4) + 3 + 3 * 3 + 2 + 8
5 + (4 + 7 + (3 * 9) * (5 + 6 * 5 + 4 + 5) * 9) + 6 * 3 * 2 + 7
7 + (7 * 9 * 7 + (8 * 4 + 7 + 7 + 2) * (4 + 5 + 7 + 6 + 6) + 9) * 5 + 5 + 2 + 3
((6 + 7 + 8 + 6 + 7) + 8 * 4 + 8 + 8) * (4 * 6) + 7 * 6";